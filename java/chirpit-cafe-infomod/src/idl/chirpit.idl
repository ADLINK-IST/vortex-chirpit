/**
 *
 * Copyright $today.year PrismTech
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
**/

/**
 * As the number of potential users is very large, we need to properly
 * scope subscriptions. One approach is to use partitions to do so.
 * 
 * Every user will be publishing data under the following partition:
 *
 *      chirp.userid
 *
 * Thus, to follow a chirper we need to subscribe to the topic
 * specified below as well as joining his partition. 
 **/

module com {
  module chirpit {    

    struct None {
      boolean value;
    };

    // TODO:  follow the GeoJSON format
    struct SomeLocation {
      float longitude;
      float latitude;
    };
    
    enum LocationKind {
      SOME_LOCATION_KIND, NONE_KIND
    };
    
    union Location switch (LocationKind) {
    case SOME_LOCATION_KIND:
      SomeLocation location;
    case NONE_KIND:
      None none;
    };


    struct ChirpId {
      string uid;
      string cid;
    };

    enum ChirpActionKind {
      CHIRP_KIND,
      RECHIRP_KIND,
      LIKE_KIND,
      DISLIKE_KIND
    };
    
    struct ChirpHeader {
      ChirpId id;
      Location location;
      unsigned long long timestamp;
      ChirpActionKind kind;
    };

    struct Rechirp {
      string chirp;       
      string ruser;
    };

    union ChirpBody switch (ChirpActionKind) {
    case CHIRP_KIND:
      string chirp;
    case RECHIRP_KIND:
      Rechirp rechirp;
    case LIKE_KIND:
      string luser;
    case DISLIKE_KIND:
      string dsuser;
    };

    
    struct ChirpAction {
      ChirpHeader header;
      ChirpBody   body;
    };
#pragma keylist ChirpAction header.id.cid
 
   
    struct User {
      string name;
      string surname;
      string region;
      string userId;
    };
#pragma keylist User userId

    enum UserActionKind {
      FOLLOW_KIND, UNFOLLOW_KIND
    };
    
    struct UserAction {
      UserActionKind kind;
      string fromUser;
      string toUser;
    };

    struct UserStats {
      string userId;
      unsigned long followers;
      unsigned long chirps;
      unsigned long followed;
    };
#pragma keylist UserStats userId

    typedef sequence<string> Partitions;

    struct AppConfig {
      string userId;
      Partitions ps;
      unsigned short history;
    };
#pragma keylist AppConfig userId

  };
  };
